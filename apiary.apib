FORMAT: 1A
HOST: http://api.notembo.com/v1/

# notembo_config

# Group Basic Routes

Configuration API for the Notembo service. All requests must be authenticated!

## Sources Collection [/sources]

### List All Sources [GET]

Returns a list of all available document sources.

+ Response 200 (application/json)

        [
            {
                "id": "evernote",
                "title": "Evernote Notebook",
                "icon": "https://dev.evernote.com/foundation/images/evernote_32.png",
                "authURL": null,
                "authenticated": true
            },
            {
                "id": "dropbox",
                "title": "Dropbox Folder",
                "icon": "https://cf.dropboxstatic.com/static/images/brand/glyph-vflK-Wlfk.png",
                "authURL": "https://my.notembo.com/auth/dropbox",
                "authenticated": false
            }
        ]

### Get specific Source [GET /sources/{sourceId}]

+ Parameters
    + sourceId: `evernote` (string) - Id of the document source service

+ Response 200 (application/json)

        {
            "id": "evernote",
            "title": "Evernote Notebook",
            "icon": "https://dev.evernote.com/foundation/images/evernote_32.png",
            "authURL": null,
            "authenticated": true
        }

## Source Folders Collection [/sources/{sourceId}/folders]

Folders available to user within one of their authenticated source service.

+ Parameters
    + sourceId: `evernote` (string) - Id of the document source service

### List All Folders [GET]

Returns a list of all available folders within a document source. 

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Death Star Project",
                "url": "https://evernote.com/notebook?guid=123456789"
            },
            {
                "id": 2,
                "name": "Garage Sale Inventory",
                "url": "https://evernote.com/notebook?guid=ABCDEFGHI"
            }
        ]
        
### Get specific folder [GET /sources/{sourceId}/folders/{folderId}]

Returns a folder with the specified id

+ Parameters
    + sourceId: `evernote` (string) - Id of the document source service
    + folderId: `1` (number) - Id of the desired folder
    
+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Death Star Project",
            "url": "https://evernote.com/notebook?guid=123456789"
        }

## Targets Collection [/targets]

### List All Targets [GET]

Returns a list of all available task targets.

+ Response 200 (application/json)

        [
            {
                "id": "todoist",
                "title": "Todoist Project",
                "icon": "https://developer.todoist.com/images/td_logo.svg",
                "authURL": null,
                "authenticated": true
            },
            {
                "id": "wunderlist",
                "title": "Wunderlist List",
                "icon": "https://d2hkcehpyog59.cloudfront.net/44685ca8cfaade90d24f718bf876257562a21214/images/favicon.ico",
                "authURL": "https://my.notembo.com/auth/wunderlist",
                "authenticated": false
            }
        ]

### Get specific Target [GET /targets/{targetId}]

+ Parameters
    + targetId: `todoist` (string) - Id of the task target service

+ Response 200 (application/json)

        {
            "id": "todoist",
            "title": "Todoist Project",
            "icon": "https://developer.todoist.com/images/td_logo.svg",
            "authURL": null,
            "authenticated": true
        }

## Target Folders Collection [/targets/{targetId}/folders]

+ Parameters
    + targetId: `todoist` (string) - Id of the task target service

### List All Folders [GET /targets/{targetId}/folders]

Returns a list of all available folders within a document source. 

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Death Star",
                "url": "https://todoist.com/app?project=123123123"
            },
            {
                "id": 2,
                "name": "Garage Sale",
                "url": "https://todoist.com/app?project=456456456"
            }
        ]

### Get specific folder [GET /targets/{targetId}/folders/{folderId}]

Returns a folder with the specified id

+ Parameters
    + targetId: `todoist` (string) - Id of the task target service
    + folderId: `1` (number) - Id of the desired folder
    
+ Response 200 (application/json)

        {
            "id": 1,
            "name": "Death Star",
            "url": "https://todoist.com/app?project=123123123"
        }

### Create New Folder [POST /targets/{targetId}/folders]

Create a new folder with a given name. Returns a corresponding folder object.

+ Request (application/json)

        {
            "name": "Luke's Birthday",
        }

+ Response 201 (application/json)

    + Headers

            Location: /targets/todoist/folders/3

    + Body

            {
                "id": 3,
                "name": "Luke's Birthday",
                "url": "https://todoist.com/app?project=789789789"
            }

## Integrations Collection [/integrations]

### List All Integrations [GET /integrations]

Returns a list of all configured integrations for the current user. 

TODO: Confirm the desirable date format

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "sourceServiceId": "evernote",
                "sourceFolderId": 1,
                "targetServiceId": "todoist",
                "targetFolderId": 1,
                "lastSyncDate": "Sat Mar 05 2016 20:58:10 GMT+0100 (CET)",
                "lastSyncStatus": "ok"
            },
            {
                "id": 2,
                "sourceServiceId": "evernote",
                "sourceFolderId": 2,
                "targetServiceId": "todoist",
                "targetFolderId": 2,
                "lastSyncDate": null,
                "lastSyncStatus": null
            }
        ]

### Create New Integration [POST /integrations]

Create a new integration between the given source and target folders.

+ Request (application/json)

        {
            "sourceServiceId": "evernote",
            "sourceFolderId": 3,
            "targetServiceId": "todoist",
            "targetFolderId": 3,
            "options": {
            }
        }

+ Response 201 (application/json)

    + Headers

            Location: /integrations/3

    + Body

            {
                "id": 3,
                "sourceServiceId": "evernote",
                "sourceFolderId": 3,
                "targetServiceId": "todoist",
                "targetFolderId": 3,
                "lastSyncDate": null,
                "lastSyncStatus": null
            }

### Get a Specific Integration [GET /integrations/{integrationId}]

Returns an integration with the given id. 

+ Parameters
    + integrationId: 1 (number) - Integration's ID

+ Response 200 (application/json)

        {
            "id": 1,
            "sourceServiceId": "evernote",
            "sourceFolderId": 1,
            "targetServiceId": "todoist",
            "targetFolderId": 1,
            "lastSyncDate": "Sat Mar 05 2016 20:58:10 GMT+0100 (CET)",
            "lastSyncStatus": "ok"
        }

### Delete an Integration [DELETE /integrations/{integrationId}]

+ Response 204

# Group Mock Server Routes

The routes below mock the behaviour for specific ID's. When studying or
implementing the API, simply ignore them.

## Integration 2 [GET /integrations/2]

+ Response 200 (application/json)

        {
            "id": 2,
            "sourceServiceId": "evernote",
            "sourceFolderId": 2,
            "targetServiceId": "todoist",
            "targetFolderId": 2,
            "lastSyncDate": null,
            "lastSyncStatus": null
        }

## DropBox Folders Collection [GET /sources/dropbox/folders]

+ Response 200 (application/json)

        [
        ]

## Wunderlist Folders Collection [GET /targets/wunderlist/folders]

+ Response 200 (application/json)

        [
        ]